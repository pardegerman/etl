/*
Copyright © 2021 Pär Degerman <par@degerman.org>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"fmt"
	"os"
	"sort"

	"github.com/pardegerman/etl/singer"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

type entry struct {
	Database string
	Table    string
	Rows     int
}

var dbOnly bool

// inventoryCmd represents the inventory command
var inventoryCmd = &cobra.Command{
	Use:   "inventory",
	Short: "Generate a database structure from a singer discovery",
	Long: `The structure is a description of databases and tables
that are discovered by a singer tap. It is generated by
piping the output of a tap discovery run into etl. The
result is provided as a flat csv on STDOUT to be consumed
by other commands or written to a file.`,
	Run: func(cmd *cobra.Command, args []string) {
		excludeDatabases := viper.GetStringSlice("exclude-databases")
		excludeTables := viper.GetStringSlice("exclude-tables")
		sort.Strings(excludeDatabases)
		sort.Strings(excludeTables)

		// Read the singer catalog from STDIN
		catalog, err := singer.ReadCatalog(os.Stdin)
		cobra.CheckErr(err)

		databases := make(map[string][]entry)
		for _, stream := range catalog.Streams {
			var dbName, tblName string
			var numRows int

			tblName = stream.TableName
			for _, metaData := range stream.Metadata {
				if metaData.MetadataProps.DatabaseName != "" {
					dbName = metaData.MetadataProps.DatabaseName
					if metaData.MetadataProps.RowCount != nil {
						numRows = *metaData.MetadataProps.RowCount
					}
					break
				}
			}
			databases[dbName] = append(databases[dbName], entry{dbName, tblName, numRows})
		}

		// Print csv header
		if !dbOnly {
			fmt.Fprintf(os.Stdout, "Database name,Table name,Number of rows\n")
		}
		for db, tables := range databases {
			if !contains(excludeDatabases, db) {
				if dbOnly {
					fmt.Fprintln(os.Stdout, db)
				} else {
					for _, table := range tables {
						if !contains(excludeTables, table.Table) {
							fmt.Fprintf(os.Stdout, "%s,%s,%d\n", db, table.Table, table.Rows)
						}
					}
				}
			}
		}
	},
}

func init() {
	rootCmd.AddCommand(inventoryCmd)

	inventoryCmd.PersistentFlags().BoolVar(&dbOnly, "dbonly", false, "Only print dbname")
}
